entity Mentor {
	id Long,
	username String  required,
	linkedin String  ,
	regDatetime Instant  ,
	reg_code  String ,
	experience Floatï¼Œ
	status TrainStatus  required
}

entity MentorSkill {
	id Long,
	selfRate  String ,
	experience Float	
}
entity MyCalendar {
	id Long,	
	calDate Instant,
	duration DurationType,
	remarks String	
}
/**
 * Training entity.
 * @author full stack trainning laidongshi.
 */
entity Training {
	id Long,
	status TrainStatus  required,
	name String  required,
    commissionAmount Float required,
	avgRating Float ,
	startDate Instant,
	endDate  Instant,  
	remarks String
}

/**
 * TrainingRecord entity.
 * @author full stack trainning laidongshi.
 */
entity TrainingRecord {
	id Long,
	status TrainRecordStatus  required,
	progress Integer required,
    commissionAmount Float required,
	avgRating Float ,
	amountReceived Float required,    
    userName String ,	   
    fees Float required,
	remarks String
}

/**
 * PaymentRecord entity.
 * @author full stack trainning laidongshi.
 */
entity PaymentRecord {
	id Long,
	txnType PayTraType required,
    amount Float required,    
    totalAmountToMentor Float required,
	issuedTime Instant required,
	remarks String
}

entity Member {
	id Long,
	type MemberType required,
	userName String,
	name String required
}

/**
 * Technology entity.
 * @author full stack trainning laidongshi.
 */
entity Technology {
	id Long,
	name String  required,
	toc String  ,
	preprequisites String  
}

enum DurationType {
	0800to1000, 1000to1200,1400to1600
}
enum MemberType {
	Trainer, Mentor
}
enum TrainStatus {
	Active, Inactive
}
enum PayTraType {
	PAID, ISSUED, CANCELLED
}
enum TrainRecordStatus {
	Propose,Progress, Completed
}
relationship ManyToOne {
	TrainingRecord{training} to Training
}
relationship ManyToOne {
	TrainingRecord{skill} to Technology
}
relationship OneToOne {
	TrainingRecord{user} to Member
}
relationship ManyToOne {
	MentorSkill{mentor} to Mentor
}
relationship OneToOne {
	MentorSkill{technology} to Technology
}
relationship OneToOne {
	PaymentRecord{user} to Member
}
relationship OneToOne {
	Member{user} to Member
}
relationship OneToOne {
	Member{mentor} to Mentor
}
relationship OneToOne {
	MyCalendar{training} to Training
}
relationship ManyToOne {
	MyCalendar{user} to Member
}
// Set pagination options
paginate TrainingRecord with infinite-scroll
paginate TrainingRecord with pagination

// Set pagination options
paginate Technology with infinite-scroll
paginate Technology with pagination

paginate PaymentRecord with infinite-scroll
paginate PaymentRecord with pagination

paginate Mentor with infinite-scroll
paginate Mentor with pagination

paginate Training with infinite-scroll
paginate Training with pagination

//  Data Transfert Objects (DTO)
// dto * with mapstruct
service all with serviceImpl

